require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/bokmarks", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Bokmark. As you add validations to Bokmark, be sure to
  # adjust the attributes here as well.
  fixtures :users
  fixtures :bokmarks
  let(:valid_attributes) {
    {
        "title": "ahmed hossam",
        "url_text": "https://www.facebook.com/ahmedhossammontassera/",
        "bookmark_type": "file",
        "parent_id":   bokmarks[0].id , 
        "tag_ids": [],
        "user_id": users[0].id
    }
  }
  let(:valid_attributes_2) {
    {
        "title": "ahmed hossam",
        "url_text": "https://www.facebook.com/a_hmed_hossam_montassera/",
        "bookmark_type": "file",
        "parent_id":   bokmarks[0].id , 
        "tag_ids": [],
        "user_id": users[0].id
    }
  }
  let(:bokmark2_valid_attributes) {
    {
        "title": "ahmed hossam",
        "url_text": "https://www.twitter.com/ahmedhossammontassera/",
        "bookmark_type": "file",
        "parent_id":   bokmarks[1].id , 
        "tag_ids": [],
        "user_id": users[1].id
    }
  }
  let(:bokmark3_valid_attributes) {
    {
        "title": "ahmed hossam",
        "url_text": "https://www.facebook.com/ahmed_hossam_montassera/",
        "bookmark_type": "file",
        "parent_id":   bokmarks[1].id , 
        "tag_ids": [],
        "user_id": users[1].id
    }
  }
  let(:invalid_attributes) {
    {
        "title": "ahmed hossam",
        "url_text": "httpswwwfacebookcomahmed_hossam_montassera",
        "bookmark_type": "file",
        "parent_id":   bokmarks[0].id , 
        "tag_ids": [],
        "user_id": users[0].id
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # BokmarksController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }
  
  def authenticated_header(user_id)
		secret_key_base = ENV.fetch("SECRET_KEY_BASE") || Rails.application.secrets.secret_key_base
		token = JWT.encode({id: user_id, exp: 60.days.from_now.to_i}, secret_key_base)
    { 'Authorization': "token #{token}" }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Bokmark.create! valid_attributes
      get bokmarks_url, headers: authenticated_header(users[0].id), as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      bokmark = Bokmark.create! valid_attributes
      get bokmark_url(bokmark), headers: authenticated_header(users[0].id), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Bokmark" do
        expect {
          post bokmarks_url,
               params: { bokmark: valid_attributes }, headers: authenticated_header(users[0].id), as: :json
        }.to change(Bokmark, :count).by(1)
        .and change(Site, :count).by(1)
      end

      it "creates 2 new Bokmark with same site" do
        expect {
          post bokmarks_url,
               params: { bokmark: valid_attributes }, headers: authenticated_header(users[0].id), as: :json
          
          post bokmarks_url,
               params: { bokmark: valid_attributes }, headers: authenticated_header(users[0].id), as: :json
        }.to change(Bokmark, :count).by(2)
        .and change(Site, :count).by(1)
      end
    end

    context "with valid parameters 2" do
      it "renders a JSON response with the new bokmark" do
        post bokmarks_url,
             params: { bokmark: valid_attributes }, headers: authenticated_header(users[0].id), as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        response_body = JSON.parse(response.body)
        response_body["site_id"].should be_kind_of Integer
        response_body["ancestry"].should_not be_empty
        response_body["shorten_url"].should be_kind_of String
      end
    end

    context "with invalid parameters" do
      it "does not create a new Bokmark" do
        expect {
          post bokmarks_url,
               params: { bokmark: invalid_attributes }, as: :json
        }.to change(Bokmark, :count).by(0)
      end

      it "renders a JSON response with errors for the new bokmark" do
        post bokmarks_url,
             params: { bokmark: invalid_attributes }, headers: authenticated_header(users[0].id), as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested bokmark" do
  #       bokmark = Bokmark.create! valid_attributes
  #       patch bokmark_url(bokmark),
  #             params: { bokmark: new_attributes }, headers: authenticated_header(users[0].id), as: :json
  #       bokmark.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "renders a JSON response with the bokmark" do
  #       bokmark = Bokmark.create! valid_attributes
  #       patch bokmark_url(bokmark),
  #             params: { bokmark: new_attributes }, headers: authenticated_header(users[0].id), as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
    # end

  #   context "with invalid parameters" do
  #     it "renders a JSON response with errors for the bokmark" do
  #       bokmark = Bokmark.create! valid_attributes
  #       patch bokmark_url(bokmark),
  #             params: { bokmark: invalid_attributes }, headers: authenticated_header(users[0].id), as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq("application/json")
  #     end
  #   end
  # end

  describe "DELETE /destroy" do
    it "destroys the requested bokmark" do
      bokmark = Bokmark.create! valid_attributes
      expect {
        delete bokmark_url(bokmark), headers: authenticated_header(users[0].id), as: :json
      }.to change(Bokmark, :count).by(-1)
    end
  end

  describe "POST /index " do
    it "Check sites count for multiple user" do
      expect( users[0].site_ids.uniq.count ).to eq 0
      expect( users[0].bokmarks.count ).to eq 1
      expect( users[1].site_ids.uniq.count ).to eq 0
      expect( users[1].bokmarks.count ).to eq 1

      expect( Site.count ).to eq 0
      expect( Bokmark.count ).to eq 2

      post bokmarks_url,
          params: { bokmark: valid_attributes }, headers: authenticated_header(users[0].id), as: :json
      expect( users[0].reload.site_ids.uniq.count ).to eq 1
      expect( users[0].reload.bokmarks.count ).to eq 2
      expect( users[1].reload.site_ids.uniq.count ).to eq 0
      expect( users[1].reload.bokmarks.count ).to eq 1
      expect( Site.count ).to eq 1
      expect( Bokmark.count ).to eq 3

      post bokmarks_url,
      params: { bokmark: bokmark2_valid_attributes }, headers: authenticated_header(users[1].id), as: :json
      expect( users[0].reload.site_ids.uniq.count ).to eq 1
      expect( users[0].reload.bokmarks.count ).to eq 2
      expect( users[1].reload.site_ids.uniq.count ).to eq 1
      expect( users[1].reload.bokmarks.count ).to eq 2
      expect( Site.count ).to eq 2
      expect( Bokmark.count ).to eq 4

      post bokmarks_url,
      params: { bokmark: bokmark3_valid_attributes }, headers: authenticated_header(users[1].id), as: :json
      expect( users[0].reload.site_ids.uniq.count ).to eq 1
      expect( users[0].reload.bokmarks.count ).to eq 2
      expect( users[1].reload.site_ids.uniq.count ).to eq 2
      expect( users[1].reload.bokmarks.count ).to eq 3
      expect( Site.count ).to eq 2
      expect( Bokmark.count ).to eq 5

      
      post bokmarks_url,
      params: { bokmark: valid_attributes_2 }, headers: authenticated_header(users[0].id), as: :json
      expect( users[0].reload.site_ids.uniq.count ).to eq 1
      expect( users[0].reload.bokmarks.count ).to eq 3
      expect( users[1].reload.site_ids.uniq.count ).to eq 2
      expect( users[1].reload.bokmarks.count ).to eq 3
      expect( Site.count ).to eq 2      
      expect( Bokmark.count ).to eq 6

    end
  end

end
